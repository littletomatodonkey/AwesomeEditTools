set nocompatie
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" vundle is a plugin manger, it manger all plugins
Plugin 'VundleVim/Vundle.vim'

" YAPF is a python format plugin, it format python to standard style
" before config this plugin, you should install it to python(python2.7, 3.5 ..): python setup.py install
" command used in vim is \":YAPF\"
" :YAPF       " formats whole buffer
" :'<,'>YAPF  " formats lines selected in visual mode
Plugin 'google/yapf', { 'rtp': 'plugins/vim' }

"Plugin 'gmarik/Vundle.vim'
"Plugin 'tpope/vim-fugitive'
"Plugin 'L9'
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"Plugin 'scrooloose/nerdtree'
"Plugin 'kien/ctrlp.vim'
"Plugin 'emmetio/emmet'
"Plugin 'Shougo/neocomplcache.vim'
"Plugin 'tpope/vim-commentary'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'scrooloose/syntastic'
"Plugin 'bling/vim-airline'
"Plugin 'godlygeek/tabular'
"Plugin 'tpope/vim-surround'
"Plugin 'AutoClose'
"Plugin 'Valloric/YouCompleteMe'
" Plugin 'google/yapf', { 'rtp': 'plugins/vim' }
call vundle#end()
filetype plugin indent on

" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

colorscheme elflord
"set t_Co=256
set sw=4
set ts=4
set et
set smarttab
set lbr
set fo+=mB
set sm
set selection=inclusive
set wildmenu
set mousemodel=popup
set ic
set cul
set cuc
set shortmess=atI
set go=
"color ron
autocmd InsertEnter * se cul
set showcmd
set scrolloff=3
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set laststatus=2
set history=100
set hlsearch
set incsearch
filetype on
filetype plugin on
filetype indent on
set viminfo+=!
" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set nu
set tabstop=4
"set nobackup
set cursorline
set ruler
set autoindent
"set softtabstop=4
set smartindent
set cindent
set shiftwidth=4
set nocompatible
"set cmdheight=2
"set shortmess=a
"silent top
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<cr>
:set cscopequickfix=s-,c-,d-,i-,t-,e-

"let NERDTreeWinPos='left'
"let NERDTreeWinSize=30
"map <F2> :NERDTreeToggle<CR>

"set laststatus=2

if has('mouse')
    set mouse-=a
endif

set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8

" start add by wangjian40 --------------
" when create new `.h .hpp .c .cc/.cpp .cu .mk .sh .py`,  vim will auto call SetTitle function to insert comments

autocmd BufNewFile *.h,*.hpp,*.c,*.cc,*.cpp,*.cu,*.cuh,Makefile,*.mk,*.sh,*.py exec ":call SetTitle()"

" add comment to `.h .hpp .c .cc .cpp .cu`
func SetComment()
    call setline(1,"/* *********************************************************************")
    call append(line("."),   "*   Copyright (C) ".strftime("%Y").", BAIDU CORPORATION. All rights reserved.")
    call append(line(".")+1, "*   ")
    call append(line(".")+2, "*   Filename  :   ".expand("%:t"))
    call append(line(".")+3, "*   Author    :   wangjian40@baidu.com")
    call append(line(".")+4, "*   Date      :   " .strftime("%Y-%m-%d"))
    call append(line(".")+5, "*   Describe  :   ")
    call append(line(".")+6, "*")
    call append(line(".")+7, "************************************************************************ */")
    call append(line(".")+8, "")
endfunc

" add comment to `shell, Makefile `
func SetComment_sh()
    call setline(1, "# ================================================================")
    call setline(2, "#   Copyright (C) ".strftime("%Y")." BAIDU CORPORATION. All rights reserved.")
    call setline(3, "#   ")
    call setline(4, "#   Filename   :    ".expand("%:t"))
    call setline(5, "#   Author     :    wangjian40@baidu.com")
    call setline(6, "#   Date       :    ".strftime("%Y-%m-%d"))
    call setline(7, "#   Describe   :   ")
    call setline(8, "#")
    call setline(9, "# ================================================================")
    call setline(10, "")
endfunc

" add comment to `python `
func SetComment_py()
    call setline(1, "#!/usr/bin/env python")
    call append(line("."), "#-*- coding:utf8 -*-")
    call append(line(".")+1, "\"\"\"")
    call append(line(".")+2, "# ================================================================")
    call append(line(".")+3, "#   Copyright (C) ".strftime("%Y")." BAIDU CORPORATION. All rights reserved.")
    call append(line(".")+4, "#   ")
    call append(line(".")+5, "#   Filename  :       ".expand("%:t"))
    call append(line(".")+6, "#   Author    :       wangjian40@baidu.com")
    call append(line(".")+7, "#   Date      :       ".strftime("%Y-%m-%d"))
    call append(line(".")+8, "#   Describe  :       ")
    call append(line(".")+9, "# ================================================================")
    call append(line(".")+10, "\"\"\"")
    call append(line(".")+11, "")
endfunc

" define function SetTitleï¼Œauto insert comment
func SetTitle()

    " for make file
    if &filetype == 'make'
        call SetComment_sh()
        call setline(11, "")

    " for shell file
    elseif &filetype == 'sh'
        call SetComment_sh()
        call setline(11,"#!/bin/bash")
        call setline(12, "")
        call setline(13, "")

    " for python file
    elseif &filetype == 'python'
       call SetComment_py()
       call append(line(".")+12, "import os, sys")
       call append(line(".")+13, "import traceback")
       call append(line(".")+14, "")
       call append(line(".")+15, "")

    " for h/c, hpp/cpp/cc, cuh/cu file
    else
        call SetComment()

        " for hpp file, use by c++
        if expand("%:e") == 'hpp'
            call append(line(".")+9, "#ifndef ".toupper(expand("%:t:r"))."_HPP_")
            call append(line(".")+10, "#define ".toupper(expand("%:t:r"))."_HPP_")
            call append(line(".")+11, "")
            call append(line(".")+12, "")
            call append(line(".")+13, "namespace  {")
            call append(line(".")+14, "")
            call append(line(".")+15, "")
            call append(line(".")+16, "#ifdef __cplusplus")
            call append(line(".")+17, "extern \"C\" {")
            call append(line(".")+18, "#endif")
            call append(line(".")+19, "")
            call append(line(".")+20, "")
            call append(line(".")+21, "")
            call append(line(".")+22, "#ifdef __cplusplus")
            call append(line(".")+23, "}")
            call append(line(".")+24, "#endif")
            call append(line(".")+25, "")
            call append(line(".")+26, "")
            call append(line(".")+27, "} // end namespace")
            call append(line(".")+28, "")
            call append(line(".")+29, "#endif  // end ".toupper(expand("%:t:r"))."_HPP_")

        " for h file, used by c
        elseif expand("%:e") == 'h'
            call append(line(".")+9, "#ifndef ".toupper(expand("%:t:r"))."_H_")
            call append(line(".")+10, "#define ".toupper(expand("%:t:r"))."_H_")
            call append(line(".")+11, "")
            call append(line(".")+12, "")
            call append(line(".")+13, "#endif  // end ".toupper(expand("%:t:r"))."_H_")

        " for cpp/cc file, used by c++
        elseif &filetype == 'cpp'
            call append(line(".")+9, "#include <cstdio>")
            call append(line(".")+10, "#include <cstdlib>")
            call append(line(".")+11, "#include <cstring>")
            call append(line(".")+12, "#include <unistd.h>")
            call append(line(".")+13, "")
            call append(line(".")+14, "#include <iostream>")
            call append(line(".")+15, "#include <string>")
            call append(line(".")+16, "")
            call append(line(".")+17, "#include \"".expand("%:t:r").".hpp\"")
            call append(line(".")+18, "")
            call append(line(".")+19, "namespace  {")
            call append(line(".")+20, "")
            call append(line(".")+21, "")
            call append(line(".")+22, "} // end namespace")
            call append(line(".")+23, "")

        " for c file, used by c
        elseif &filetype == 'c'
            call append(line(".")+9, "#include <stdio.h>")
            call append(line(".")+10, "#include <stdlib.h>")
            call append(line(".")+11, "#include <string.h>")
            call append(line(".")+12, "#include <unistd.h>")
            call append(line(".")+13, "")
            call append(line(".")+14, "#include \"".expand("%:t:r").".h\"")
            call append(line(".")+15, "")
            call append(line(".")+16, "")

        " for cuh file, used by cuda
        elseif expand("%:e") == 'cuh'
            call append(line(".")+9, "#ifndef ".toupper(expand("%:t:r"))."_CU_H_")
            call append(line(".")+10, "#define ".toupper(expand("%:t:r"))."_CU_H_")
            call append(line(".")+11, "")
            call append(line(".")+12, "")
            call append(line(".")+13, "#endif  // end ".toupper(expand("%:t:r"))."_CU_H_")

        " for cu file, used by cuda
        elseif expand("%:e") == 'cu'
            call append(line(".")+9, "#include <cstdio>")
            call append(line(".")+10, "#include <cstdlib>")
            call append(line(".")+11, "#include <cstring>")
            call append(line(".")+12, "#include <unistd.h>")
            call append(line(".")+13, "")
            call append(line(".")+14, "#include <iostream>")
            call append(line(".")+15, "#include <string>")
            call append(line(".")+16, "")
            call append(line(".")+17, "#include <cuda.h>")
            call append(line(".")+18, "#include <cuda_runtime.h>")
            call append(line(".")+19, "")
            call append(line(".")+20, "#include \"".expand("%:t:r").".cuh\"")
            call append(line(".")+21, "")
            call append(line(".")+22, "")

        endif

    endif
endfunc

" Plug
" Plug 'yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
